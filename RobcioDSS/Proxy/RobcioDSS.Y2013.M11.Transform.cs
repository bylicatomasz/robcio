//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("RobcioDSS")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("RobcioDSS")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="RobcioDSS.Y2013.M11, Version=1.0.0.0, Culture=neutral, PublicKeyToken=bd8ea7e51dc" +
    "aaf39")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.AllowPartiallyTrustedCallersAttribute()]

namespace Dss.Transforms.TransformRobcioDSS {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::RobcioDSS.Proxy.RobcioDSSState), new global::Microsoft.Dss.Core.Attributes.Transform(RobcioDSS_Proxy_RobcioDSSState_TO_RobcioDSS_RobcioDSSState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::RobcioDSS.RobcioDSSState), new global::Microsoft.Dss.Core.Attributes.Transform(RobcioDSS_RobcioDSSState_TO_RobcioDSS_Proxy_RobcioDSSState));
        }
        
        public static object RobcioDSS_Proxy_RobcioDSSState_TO_RobcioDSS_RobcioDSSState(object transformFrom) {
            global::RobcioDSS.RobcioDSSState target = new global::RobcioDSS.RobcioDSSState();
            global::RobcioDSS.Proxy.RobcioDSSState from = ((global::RobcioDSS.Proxy.RobcioDSSState)(transformFrom));
            target.State = ((global::RobcioDSS.LogicalState)(((int)(from.State))));
            if ((from.SonarState != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.SonarState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.SonarState = tmp;
            }
            else {
                target.SonarState = null;
            }
            if ((from.LightState != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp0 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.LightState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.LightState = tmp0;
            }
            else {
                target.LightState = null;
            }
            if ((from.CompassState != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp1 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.CompassState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                target.CompassState = tmp1;
            }
            else {
                target.CompassState = null;
            }
            if ((from.TouchState != null)) {
                global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor tmp2 = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor();
                ((Microsoft.Dss.Core.IDssSerializable)(from.TouchState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                target.TouchState = tmp2;
            }
            else {
                target.TouchState = null;
            }
            return target;
        }
        
        public static object RobcioDSS_RobcioDSSState_TO_RobcioDSS_Proxy_RobcioDSSState(object transformFrom) {
            global::RobcioDSS.Proxy.RobcioDSSState target = new global::RobcioDSS.Proxy.RobcioDSSState();
            global::RobcioDSS.RobcioDSSState from = ((global::RobcioDSS.RobcioDSSState)(transformFrom));
            target.State = ((global::RobcioDSS.Proxy.LogicalState)(((int)(from.State))));
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp = from.SonarState;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp0 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.SonarState = tmp0;
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp1 = from.LightState;
            if ((tmp1 != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp2 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp1)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                target.LightState = tmp2;
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp3 = from.CompassState;
            if ((tmp3 != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp4 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp3)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                target.CompassState = tmp4;
            }
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor tmp5 = from.TouchState;
            if ((tmp5 != null)) {
                global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor tmp6 = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp5)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp6)));
                target.TouchState = tmp6;
            }
            return target;
        }
    }
}
